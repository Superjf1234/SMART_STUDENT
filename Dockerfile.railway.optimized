# Dockerfile optimizado para Railway
FROM python:3.12-slim

# Variables de entorno
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
# Forzar dev para mejor depuración inicial
ENV REFLEX_ENV=dev 
ENV NODE_ENV=development
# Asegurar que bun esté en el PATH
ENV PATH="/root/.bun/bin:$PATH"

# Instalar dependencias del sistema (incluyendo git y unzip)
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    curl \
    unzip \
    git \
    && rm -rf /var/lib/apt/lists/*

# Instalar Node.js (versión 18.x)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Instalar Bun
RUN curl -fsSL https://bun.sh/install | bash

# Establecer directorio de trabajo
WORKDIR /app

# Copiar requirements e instalar dependencias Python
# Copiar primero para aprovechar el caché de Docker si no cambian
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copiar el resto del código fuente
COPY . .

# Crear directorios necesarios que Reflex podría esperar
RUN mkdir -p /app/data /app/.web

# Hacer ejecutables los scripts de inicio
RUN chmod +x /app/emergency_start_railway.py /app/ultra_robust_start.py

# Exponer el puerto que Railway usará (inyectado por Railway)
EXPOSE $PORT

# Comando de inicio - Usar el NUEVO script de emergencia
# El script tiene instrucciones explícitas para mantenerse en /app
CMD ["python", "emergency_start_railway.py"]
